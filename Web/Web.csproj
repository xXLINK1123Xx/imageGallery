<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Cors" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="3.1.0" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Compile Remove="ClientApp\.idea\**" />
    <Content Remove="$(SpaRoot)**" />
    <Content Remove="ClientApp\.idea\**" />
    <EmbeddedResource Remove="ClientApp\.idea\**" />
    <Content Include="ClientApp\src\app\app.component.html" />
    <Content Include="ClientApp\src\app\app.component.ts" />
    <Content Include="ClientApp\src\app\app.module.ts" />
    <Content Include="ClientApp\src\app\app.server.module.ts" />
    <Content Include="ClientApp\src\app\fetch-data\fetch-data.component.html" />
    <Content Include="ClientApp\src\app\fetch-data\fetch-data.component.ts" />
    <Content Include="ClientApp\src\app\home\home.component.html" />
    <Content Include="ClientApp\src\app\home\home.component.ts" />
    <Content Include="ClientApp\src\app\home\home.css" />
    <Content Include="ClientApp\src\app\home\home.scss" />
    <Content Include="ClientApp\src\app\image-preview\image-preview.component.html" />
    <Content Include="ClientApp\src\app\image-preview\image-preview.component.ts" />
    <Content Include="ClientApp\src\app\image-preview\image-preview.css" />
    <Content Include="ClientApp\src\app\image-preview\image-preview.scss" />
    <Content Include="ClientApp\src\app\image-viewer\image-viewer.component.html" />
    <Content Include="ClientApp\src\app\image-viewer\image-viewer.css" />
    <Content Include="ClientApp\src\app\image-viewer\image-viewer.css.map" />
    <Content Include="ClientApp\src\app\image-viewer\image-viewer.scss" />
    <Content Include="ClientApp\src\app\models\post.model.ts" />
    <Content Include="ClientApp\src\app\models\tag.model.ts" />
    <Content Include="ClientApp\src\app\nav-menu\nav-menu.component.css" />
    <Content Include="ClientApp\src\app\nav-menu\nav-menu.component.html" />
    <Content Include="ClientApp\src\app\nav-menu\nav-menu.component.ts" />
    <Content Include="ClientApp\src\app\tag-menu\tag-menu.component.css" />
    <Content Include="ClientApp\src\app\tag-menu\tag-menu.component.css.map" />
    <Content Include="ClientApp\src\app\tag-menu\tag-menu.component.html" />
    <Content Include="ClientApp\src\app\tag-menu\tag-menu.component.scss" />
    <Content Include="ClientApp\src\app\tag-menu\tag-menu.component.ts" />
    <Content Include="ClientApp\src\app\tag\tag.component.css" />
    <Content Include="ClientApp\src\app\tag\tag.component.html" />
    <Content Include="ClientApp\src\app\tag\tag.component.scss" />
    <Content Include="ClientApp\src\assets\.gitkeep" />
    <Content Include="ClientApp\src\environments\environment.prod.ts" />
    <Content Include="ClientApp\src\environments\environment.ts" />
    <Content Include="ClientApp\src\index.html" />
    <Content Include="ClientApp\src\karma.conf.js" />
    <Content Include="ClientApp\src\main.ts" />
    <Content Include="ClientApp\src\polyfills.ts" />
    <Content Include="ClientApp\src\styles.css" />
    <Content Include="ClientApp\src\test.ts" />
    <Content Include="ClientApp\src\tsconfig.app.json" />
    <Content Include="ClientApp\src\tsconfig.server.json" />
    <Content Include="ClientApp\src\tsconfig.spec.json" />
    <Content Include="ClientApp\src\tslint.json" />
    <None Remove="$(SpaRoot)**" />
    <None Remove="ClientApp\.idea\**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
    <Compile Remove="wwwroot\images\**" />
    <EmbeddedResource Remove="wwwroot\images\**" />
    <None Remove="wwwroot\images\**" />
    <Content Remove="wwwroot\images\**" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="ClientApp\.idea\ClientApp.iml" />
    <None Remove="ClientApp\.idea\codeStyles\codeStyleConfig.xml" />
    <None Remove="ClientApp\.idea\codeStyles\Project.xml" />
    <None Remove="ClientApp\.idea\inspectionProfiles\Project_Default.xml" />
    <None Remove="ClientApp\.idea\misc.xml" />
    <None Remove="ClientApp\.idea\modules.xml" />
    <None Remove="ClientApp\.idea\vcs.xml" />
    <None Remove="ClientApp\.idea\workspace.xml" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Data\Data.csproj" />
    <ProjectReference Include="..\Infrastructure\Infrastructure.csproj" />
  </ItemGroup>

  <ItemGroup>
    <TypeScriptCompile Include="ClientApp\src\app\image-viewer\image-viewer.component.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\images.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\tag\tag.component.ts" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="App_Data" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
